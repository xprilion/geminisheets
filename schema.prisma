datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  geminiKey     String?
  accounts      Account[]
  sessions      Session[]
  functions     Function[]
  sheets        Sheet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Function {
  id          String    @id @default(cuid())
  name        String
  description String
  code        String
  enabled     Boolean   @default(true)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  sheetFunctions      SheetFunction[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SheetFunction {
  id          String       @id @default(cuid())
  sheetId     String       
  functionId  String
  appsScriptProjectId String
  function    Function     @relation(fields: [functionId], references: [id])
  sheet       Sheet  @relation(fields: [sheetId], references: [id])
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, sheetId, functionId])
}


model Sheet {
  id          String          @id @default(cuid())
  googleSheetId     String
  name        String
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  sheetFunctions SheetFunction[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  @@index([googleSheetId, userId], name: "userSheetIndex")
}


model GlobalSheetState {
  googleSheetId     String    @id
  initialized Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}